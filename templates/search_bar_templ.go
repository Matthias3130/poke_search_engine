// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func SearchBar() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<input type=\"search\" id=\"search\" pattern=\"[A-Za-z\\s\\-]*\" placeholder=\"Search...\" value=\"\" onkeyup=\"findPokemon(this.value)\"> <button type=\"button\" onclick=\"toggleOrder()\"><i class=\"material-icons\" id=\"icon-sort\">swap_vert</i></button><div id=\"filter-type\"><label><input type=\"checkbox\" class=\"poke-type\" name=\"normal\" value=\"normal\">Normal</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"fire\" value=\"fire\">Fire</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"water\" value=\"water\">Water</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"electric\" value=\"electric\">Electric</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"grass\" value=\"grass\">Grass</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"ice\" value=\"ice\">Ice</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"fighting\" value=\"fighting\">Fighting</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"poison\" value=\"poison\">Poison</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"ground\" value=\"ground\">Ground</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"flying\" value=\"flying\">Flying</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"psychic\" value=\"psychic\">Psychic</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"bug\" value=\"bug\">Bug</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"rock\" value=\"rock\">Rock</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"ghost\" value=\"ghost\">Ghost</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"dragon\" value=\"dragon\">Dragon</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"dark\" value=\"dark\">Dark</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"steel\" value=\"steel\">Steel</label> <label><input type=\"checkbox\" class=\"poke-type\" name=\"fairy\" value=\"fairy\">Fairy</label></div><table><thead><tr><th>ID</th><th>Name</th><th>Image</th><th>Main Type</th><th>Secondary Type</th><th>First Ability</th><th>Second Ability</th><th>Hidden Ability</th><th>HP</th><th>Atk</th><th>Def</th><th>Sp_Atk</th><th>Sp_Def</th><th>Spd</th></tr></thead> <tbody id=\"table-body\"></tbody></table><script>\nlet isReverse = false;\n\nconst checkboxes = document.querySelectorAll('.poke-type');\ncheckboxes.forEach(checkbox => {\n  checkbox.addEventListener('change', () => {\n    console.log(`${checkbox.value} is ${checkbox.checked ? 'checked' : 'unchecked'}`);\n    const userInput = document.getElementById(\"search\").value;\n    findPokemon(userInput)\n  });\n});\n\ngetAllPokemon();\n\nfunction getAllPokemon() {\n    const url = \"http://localhost:8008/get_all_pokemon\";\n    fetch(url)\n    .then(response => {\n        if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        appendPokemon(data)\n        })\n    .catch(error => console.error('Fetch error:', error));\n}\n\nfunction findPokemon(userInput) {\n    validInput(userInput);\n\n    const url = \"http://localhost:8008/find_pokemon\";\n\n    const types = filteredByType();\n    console.log(types);\n    if (types.length === 0) {\n        console.log(\"No types selected.\");\n    }\n\n    fetch(url, {\n         method: 'POST',  // Use POST to send data\n        headers: {\n            'Content-Type': 'application/json'  // Indicate that we're sending JSON data\n        },\n        body: JSON.stringify(\n            { \n                find: userInput,\n                order: isReverse,\n                types: types\n            })  // Send inputValue in the request body\n    })\n    .then(response => {\n        if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        appendPokemon(data)\n    })\n    .catch(error => console.error('Fetch error:', error));\n}\n\nfunction toggleOrder() {\n    const userInput = document.getElementById(\"search\").value;\n    isReverse = !isReverse;\n    findPokemon(userInput);\n}\n\nfunction filteredByType() {\n    const types = [];\n\n    checkboxes.forEach(checkbox => {\n        if (checkbox.checked) {\n            types.push(checkbox.value);\n        }\n    });\n    console.log(types);\n    return types\n}\n\nfunction appendPokemon(pokemons) {\n    const tbody = document.getElementById(\"table-body\");\n     tbody.innerHTML = '';\n    for (const pokemon of pokemons) {\n        const row = document.createElement(\"tr\");\n        for (const key in pokemon) {\n            if (pokemon.hasOwnProperty(key)) {\n                const attribute = document.createElement(\"td\");\n                switch (key) {\n                    case \"img\":\n                        const image = document.createElement(\"img\");\n                        image.src = \"assets/images/\" + String(pokemon[\"id\"]) + \".png\";\n                        image.style.width = \"50px\";  // Corrected width\n                        image.style.height = \"50px\";  // Corrected height\n                        attribute.appendChild(image);\n                        break;\n                    default:\n                        attribute.textContent = String(pokemon[key]);\n                        break;\n                }\n                row.appendChild(attribute);\n            }\n        }\n        tbody.appendChild(row);\n    }\n}\n\nfunction validInput(userInput) {\n    const pattern = /^[A-Za-z\\s\\-]*$/;\n    if (!pattern.test(userInput)) {\n       console.log(\"Input does not match the pattern.\");\n    //    alert(\"Invalid Input:\\s\" + userInput);\n    }\n}\n\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
