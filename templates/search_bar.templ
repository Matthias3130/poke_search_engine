package templates


templ SearchBar() {
<input type="search" id="search" pattern="[A-Za-z\s\-]*" placeholder="Search..." value="" onkeyup="findPokemon(this.value)">

<button type="button" onclick="toggleOrder()">
<i class="material-icons" id="icon-sort">swap_vert</i>
</button>

<div id="filter-type">
    <h3>Type</h3>
    <label><input type="checkbox" class="poke-type checkbox" name="normal" value="normal">Normal</label>
    <label><input type="checkbox" class="poke-type checkbox" name="fire" value="fire">Fire</label>
    <label><input type="checkbox" class="poke-type checkbox" name="water" value="water">Water</label>
    <label><input type="checkbox" class="poke-type checkbox" name="electric" value="electric">Electric</label>
    <label><input type="checkbox" class="poke-type checkbox" name="grass" value="grass">Grass</label>
    <label><input type="checkbox" class="poke-type checkbox" name="ice" value="ice">Ice</label>
    <label><input type="checkbox" class="poke-type checkbox" name="fighting" value="fighting">Fighting</label>
    <label><input type="checkbox" class="poke-type checkbox" name="poison" value="poison">Poison</label>
    <label><input type="checkbox" class="poke-type checkbox" name="ground" value="ground">Ground</label>
    <label><input type="checkbox" class="poke-type checkbox" name="flying" value="flying">Flying</label>
    <label><input type="checkbox" class="poke-type checkbox" name="psychic" value="psychic">Psychic</label>
    <label><input type="checkbox" class="poke-type checkbox" name="bug" value="bug">Bug</label>
    <label><input type="checkbox" class="poke-type checkbox" name="rock" value="rock">Rock</label>
    <label><input type="checkbox" class="poke-type checkbox" name="ghost" value="ghost">Ghost</label>
    <label><input type="checkbox" class="poke-type checkbox" name="dragon" value="dragon">Dragon</label>
    <label><input type="checkbox" class="poke-type checkbox" name="dark" value="dark">Dark</label>
    <label><input type="checkbox" class="poke-type checkbox" name="steel" value="steel">Steel</label>
    <label><input type="checkbox" class="poke-type checkbox" name="fairy" value="fairy">Fairy</label>
</div>

<div id="filter-generation">
    <h3>Region</h3>
    <label><input type="checkbox" class="poke-gen checkbox" name="kanto" value="1">Kanto</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="johto" value="2">Johto</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="hoenn" value="3">Hoenn</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="sinnoh" value="4">Sinnoh</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="unova" value="5">Unova</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="kalos" value="6">Kalos</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="alola" value="7">Alola</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="galar" value="8">Galar</label>
    <label><input type="checkbox" class="poke-gen checkbox" name="paldea" value="9">Paldea</label>
</div>

<div id="filter-group">
    <h3>Tags</h3>
    <label><input type="checkbox" class="poke-group" name="starters" id="starters" value="starters">Starters</label>
    <label><input type="checkbox" class="poke-group" name="pseudo-legendary" id="pseudo-legendary" value="pseudo-legendary">Pseudo-Legendary</label>
    <label><input type="checkbox" class="poke-group" name="sub-legendary" id="sub-legendary" value="sub-legendary">Sub-Legendary</label> 
    <label><input type="checkbox" class="poke-group" name="legendary" id="legendary" value="legendary">Legendary</label> 
    <label><input type="checkbox" class="poke-group" name="mythical" id="mythical" value="mythical">Mythical</label>
</div>


<table id="table">
<thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Image</th>
        <th>Type</th>
        // <th>Secondary Type</th>
        <th>Abilities</th>
        // <th>Second Ability</th>
        // <th>Hidden Ability</th>
        <th>HP</th>
        <th>Atk</th>
        <th>Def</th>
        <th>Sp_Atk</th>
        <th>Sp_Def</th>
        <th>Spd</th>
        <th>Tags</th>
        // <th>Gen</th>
    </tr>
</thead>
<tbody id="table-body">
</tbody>
</table>

<script>
document.addEventListener("DOMContentLoaded", () => {
    getAllPokemon();
});

 let isReverse = false;

const checkboxes = document.querySelectorAll('.checkbox');
checkboxes.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
        console.log(`${checkbox.value} is ${checkbox.checked ? 'checked' : 'unchecked'}`);
        const userInput = document.getElementById("search").value;
        findPokemon(userInput);
    });
});

const pokeGroup = document.querySelectorAll('.poke-group');
pokeGroup.forEach(checkbox => {
    checkbox.addEventListener('change', () => {
        console.log(`${checkbox.value} is ${checkbox.checked ? 'checked' : 'unchecked'}`);
        const userInput = document.getElementById("search").value;
        findPokemon(userInput);
    });
});

function getAllPokemon() {
    const url = "http://localhost:8008/get_all_pokemon";
    fetch(url)
    .then(response => {
        if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        appendPokemon(data)
        })
    .catch(error => console.error('Fetch error:', error));
}

function findPokemon(userInput) {
    validInput(userInput);

    const url = "http://localhost:8008/find_pokemon";

    const types = filteredByType();
    console.log(types);
    if (types.length === 0) {
        console.log("No types selected.");
    }

    const gens = filteredByGen();
    console.log(gens);
    if (gens.length === 0) {
        console.log("No gens selected.");
    }

    const starter = document.getElementById("starters");
    const pseudo = document.getElementById("pseudo-legendary");
    const sub = document.getElementById("sub-legendary");
    const legend = document.getElementById("legendary");
    const myth = document.getElementById("mythical");

    const group = [
        starter ? starter.checked : false,
        pseudo ? pseudo.checked : false,
        sub ? sub.checked : false,
        legend ? legend.checked : false,
        myth ? myth.checked : false
    ];

    console.log(group)

    fetch(url, {
         method: 'POST',  // Use POST to send data
        headers: {
            'Content-Type': 'application/json'  // Indicate that we're sending JSON data
        },
        body: JSON.stringify(
            { 
                find: userInput,
                order: isReverse,
                types: types,
                gens: gens,
                group: group
            })  // Send inputValue in the request body
    })
    .then(response => {
        if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        appendPokemon(data)
    })
    .catch(error => console.error('Fetch error:', error));
}

function toggleOrder() {
    const userInput = document.getElementById("search").value;
    isReverse = !isReverse;
    findPokemon(userInput);
}

function filteredByType() {
    const types = [];
    checkboxes.forEach(checkbox => {
        if (checkbox.checked && !Number.isInteger(parseFloat(checkbox.value))) {
            types.push(checkbox.value);
        }
    });
    console.log(types);
    return types
}

function filteredByGen() {
    const gens = [];
    checkboxes.forEach(checkbox => {
        const genNum = parseInt(checkbox.value, 10); 
        if (checkbox.checked && genNum >= 0 && parseInt(checkbox.value)  <= 9) {
            gens.push(genNum);
        }
    });
    console.log(gens);
    return gens;
}

function appendPokemon(pokemons) {
    const tbody = document.getElementById("table-body");
     tbody.innerHTML = '';
    for (const pokemon of pokemons) {
        const row = document.createElement("tr");
        const types = document.createElement("ul");
        const abilities = document.createElement("ul");
        for (const key in pokemon) {
            
            if (key == "main_t") {
                const main_t = document.createElement("li");
                main_t.textContent = capitalizes(String(pokemon[key]));
                types.appendChild(main_t);
            }
            else if (key == "sub_t") {
                const attribute = document.createElement("td");
                const sub_t = document.createElement("li");
                if (pokemon[key] != "Null") {
                    sub_t.textContent = capitalizes(String(pokemon[key]));
                }
                types.appendChild(sub_t);
                attribute.appendChild(types);
                row.appendChild(attribute);
            }
            else if (key == "first_ability") {
                const first_ability = document.createElement("li");
                first_ability.textContent = capitalizes(String(pokemon[key]));
                abilities.appendChild(first_ability);
            }
            else if (key == "second_ability") {
                const second_ability = document.createElement("li");
                if (pokemon[key] != "Null") {
                    second_ability.textContent = capitalizes(String(pokemon[key]));
                }
                abilities.appendChild(second_ability);
            }
             else if (key == "hidden_ability") {
                const attribute = document.createElement("td");
                const hidden_ability = document.createElement("li");
                if (pokemon[key] != "Null") {
                    hidden_ability.textContent = capitalizes(String(pokemon[key]));
                    hidden_ability.style.fontWeight = "bold";
                }
                abilities.appendChild(hidden_ability);
                attribute.appendChild(abilities);
                row.appendChild(attribute);
            }
            else {
                const attribute = document.createElement("td");
                switch (key) {
                    case "img":
                        const image = document.createElement("img");
                        const source = "assets/images/" + String(pokemon["id"]) + ".png";
                        image.src = source;
                        image.style.width = "50px";  // Corrected width
                        image.style.height = "50px";  // Corrected height
                        attribute.appendChild(image);
                        break;
                    case "tags":
                        const lyst = document.createElement("ul");
                        const tags = pokemon["tags"];
                        for (const tag in tags) {
                            switchTagValues(lyst, tags, tag);
                        }
                        attribute.appendChild(lyst);
                        break;
                    default:
                        attribute.textContent = capitalizes(String(pokemon[key]));
                        break;
                }
                row.appendChild(attribute);
            }
        }
        tbody.appendChild(row);
    }
}

function switchTagValues(lyst, tags, key) {
    const datapoint = document.createElement("li");
    const gen = {
        1: "1-Kanto",
        2: "2-Johto",
        3: "3-Hoenn",
        4: "4-Sinnoh",
        5: "5-Unova",
        6: "6-Kalos",
        7: "7-Alola",
        8: "8-Galar",
        9: "9-Paldea"
    };

    switch (key) {
        case "gens":
            datapoint.textContent = gen[tags[key]];
            lyst.appendChild(datapoint);
            break;
        case "isStarter":
            if (tags[key] == true) {
                datapoint.textContent = "Starter";
                lyst.appendChild(datapoint);
            }
            break;
        case "isPseudo":
            if (tags[key] == true) {
                datapoint.textContent = "Pseudo-Legendary";
                lyst.appendChild(datapoint);
            }
            
            break;
        case "isSubLegend":
            if (tags[key] == true) {
                datapoint.textContent = "Sub-Legendary";
                lyst.appendChild(datapoint);
            }
            break;
        case "isLegend":
            if (tags[key] == true) {
                datapoint.textContent = "Legendary";
                lyst.appendChild(datapoint);
            }
            break;
        case "isMyth":
            if (tags[key] == true)  {
                datapoint.textContent ="Mythical";
                lyst.appendChild(datapoint);
            }
            break;
        default:
            break;
    }
}

function validInput(userInput) {
    const pattern = /^[A-Za-z\s\-]*$/;
    if (!pattern.test(userInput)) {
       console.log("Input does not match the pattern.");
    //    alert("Invalid Input:\s" + userInput);
    }
}

function capitalizes(str) {
    return str
        .split("-")
        .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1).toLowerCase())
        .join("-");
}


</script>
}